{"version":3,"sources":["../../../../telemetry/trace/report/to-telemetry.ts"],"names":["TRACE_EVENT_WHITELIST","telemetry","payload","durationInMicroseconds","reportToTelemetry"],"mappings":";;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAMA,qBAAqB,GAAG,IAAA,GAAA,CAE1B,MAAA,CAAA,OAAA,CAAA;AAFJ,yBAAA;AAEI,CAAA,CAF0B,CAA9B;;;AAQE,QAAA,SAAA,GAAgB,qBAAA,CAAA,GAAA,CAAA,QAAA,CAAhB;;AAEC,MAAA,CAAA,SAAA,EAAA;;AACD;;AACA,QAAA,SAAA,GAAgB,OAAA,CAAA,YAAA,CAAA,GAAA,CAAA,WAAA,CAAhB;;AAEC,MAAA,CAAA,SAAA,EAAA;;AAEDC;;AAEEC,EAAAA,SAAO,CAAA,MAAPA,CAAS;AACPC,IAAAA,SADO;AAAA,IAAA,OAAA,EAAA;AAFXF,MAAAA,sBAAAA,EAAAA;AAEW;AAAA,GAATC;AAMWE,C","sourcesContent":["import { traceGlobals } from '../shared'\r\n\r\nconst TRACE_EVENT_WHITELIST = new Map(\r\n  Object.entries({\r\n    'webpack-invalidated': 'WEBPACK_INVALIDATED',\r\n  })\r\n)\r\n\r\nconst reportToTelemetry = (spanName: string, duration: number) => {\r\n  const eventName = TRACE_EVENT_WHITELIST.get(spanName)\r\n  if (!eventName) {\r\n    return\r\n  }\r\n  const telemetry = traceGlobals.get('telemetry')\r\n  if (!telemetry) {\r\n    return\r\n  }\r\n\r\n  telemetry.record({\r\n    eventName,\r\n    payload: {\r\n      durationInMicroseconds: duration,\r\n    },\r\n  })\r\n}\r\n\r\nexport default reportToTelemetry\r\n"]}