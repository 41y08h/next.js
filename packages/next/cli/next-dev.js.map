{"version":3,"sources":["../../cli/next-dev.ts"],"names":["nextDev","argv","validArgs","Boolean","Number","String","args","error","code","message","console","log","process","exit","dir","_","preflight","getPackageVersion","sassVersion","nodeSassVersion","Promise","all","cwd","name","Log","warn","choosePort","defaultPort","availablePort","isTerminalInteractive","stdout","isTTY","packageJsonPath","require","sync","scripts","scriptsArray","Object","entries","nextScript","find","cmd","isRoot","getuid","isAdminRequired","platform","question","type","initial","answer","shouldChangePort","env","PORT","parseInt","port","host","appUrl","dev","isNextDevCommand","then","app","catch","prepare","nextTick"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport arg from 'next/dist/compiled/arg/index.js'\nimport { existsSync } from 'fs'\nimport startServer from '../server/lib/start-server'\nimport { printAndExit } from '../server/lib/utils'\nimport * as Log from '../build/output/log'\nimport { startedDevelopmentServer } from '../build/output'\nimport { cliCommand } from '../bin/next'\nimport detectPort from 'detect-port'\nimport prompts, { PromptObject } from 'prompts'\nimport clearConsole from '../server/lib/clearConsole'\n\nconst nextDev: cliCommand = async (argv) => {\n  const validArgs: arg.Spec = {\n    // Types\n    '--help': Boolean,\n    '--port': Number,\n    '--hostname': String,\n\n    // Aliases\n    '-h': '--help',\n    '-p': '--port',\n    '-H': '--hostname',\n  }\n  let args: arg.Result<arg.Spec>\n  try {\n    args = arg(validArgs, { argv })\n  } catch (error) {\n    if (error.code === 'ARG_UNKNOWN_OPTION') {\n      return printAndExit(error.message, 1)\n    }\n    throw error\n  }\n  if (args['--help']) {\n    console.log(`\n      Description\n        Starts the application in development mode (hot-code reloading, error\n        reporting, etc)\n\n      Usage\n        $ next dev <dir> -p <port number>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p      A port number on which to start the application\n        --hostname, -H  Hostname on which to start the application (default: 0.0.0.0)\n        --help, -h      Displays this message\n    `)\n    process.exit(0)\n  }\n\n  const dir = resolve(args._[0] || '.')\n\n  // Check if pages dir exists and warn if not\n  if (!existsSync(dir)) {\n    printAndExit(`> No such directory exists as the project root: ${dir}`)\n  }\n\n  async function preflight() {\n    const { getPackageVersion } = await import('../lib/get-package-version')\n    const [sassVersion, nodeSassVersion] = await Promise.all([\n      getPackageVersion({ cwd: dir, name: 'sass' }),\n      getPackageVersion({ cwd: dir, name: 'node-sass' }),\n    ])\n    if (sassVersion && nodeSassVersion) {\n      Log.warn(\n        'Your project has both `sass` and `node-sass` installed as dependencies, but should only use one or the other. ' +\n          'Please remove the `node-sass` dependency from your project. ' +\n          ' Read more: https://nextjs.org/docs/messages/duplicate-sass'\n      )\n    }\n  }\n\n  async function choosePort(defaultPort: number): Promise<number> {\n    const availablePort: number = await detectPort(defaultPort)\n\n    if (defaultPort === availablePort) return defaultPort\n\n    // Default port is not free,\n    // prompt user to allow another port\n\n    const isTerminalInteractive = process.stdout.isTTY\n\n    // Simply log instructions if terminal is not interactive\n    if (!isTerminalInteractive) {\n      let message = `Something is already running on port ${defaultPort}.`\n      const packageJsonPath = require('next/dist/compiled/find-up').sync(\n        'package.json',\n        { cwd: dir }\n      )\n      const { scripts } = require(packageJsonPath)\n      if (scripts) {\n        const scriptsArray = Object.entries(scripts)\n        const nextScript = scriptsArray.find(([_, cmd]) => cmd === 'next')\n        if (nextScript) {\n          message += `\\`npm run ${nextScript[0]} -- -p <some other port>\\``\n        }\n      }\n      console.error(message)\n    }\n\n    // Terimal is interactive\n    // prompt to run on another port\n\n    const isRoot = process.getuid && process.getuid() === 0\n    const isAdminRequired =\n      process.platform !== 'win32' && defaultPort < 1024 && !isRoot\n\n    const message = isAdminRequired\n      ? `Admin permissions are required to run a server on a port below 1024.`\n      : `Something is already running on port ${defaultPort}.`\n\n    const question: PromptObject = {\n      type: 'confirm',\n      name: 'shouldChangePort',\n      message: `${message}\\n\\nWould you like to run the app on another port instead?`,\n      initial: true,\n    }\n\n    clearConsole()\n    const answer = await prompts(question)\n\n    if (answer.shouldChangePort) {\n      clearConsole()\n      return availablePort\n    }\n    process.exit()\n  }\n\n  const defaultPort =\n    args['--port'] || (process.env.PORT && parseInt(process.env.PORT)) || 3000\n  const port = await choosePort(defaultPort)\n  const host = args['--hostname'] || '0.0.0.0'\n  const appUrl = `http://${host === '0.0.0.0' ? 'localhost' : host}:${port}`\n\n  startServer({ dir, dev: true, isNextDevCommand: true }, port, host)\n    .then(async (app) => {\n      startedDevelopmentServer(appUrl, `${host}:${port}`)\n      // Start preflight after server is listening and ignore errors:\n      preflight().catch(() => {})\n      // Finalize server bootup:\n      await app.prepare()\n    })\n    .catch(() => process.nextTick(() => process.exit(1)))\n}\n\nexport { nextDev }\n"]}