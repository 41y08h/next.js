{"version":3,"sources":["../../cli/next-dev.ts"],"names":["nextDev","argv","validArgs","Boolean","Number","String","args","error","code","message","console","log","process","exit","dir","_","preflight","getPackageVersion","sassVersion","nodeSassVersion","Promise","all","cwd","name","Log","warn","defaultPort","env","PORT","parseInt","host","appUrl","main","port","dev","isNextDevCommand","then","app","catch","prepare","err","errorMessage","pkgAppPath","require","sync","appPackage","scripts","nextScript","Object","entries","find","scriptLine","isTerminalInteractive","stdout","isTTY","altPort","isRoot","platform","question","type","initial","answer","shouldChangePort","nextTick"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\r\nimport { resolve } from 'path'\r\nimport arg from 'next/dist/compiled/arg/index.js'\r\nimport { existsSync } from 'fs'\r\nimport startServer from '../server/lib/start-server'\r\nimport { printAndExit } from '../server/lib/utils'\r\nimport * as Log from '../build/output/log'\r\nimport { startedDevelopmentServer } from '../build/output'\r\nimport { cliCommand } from '../bin/next'\r\nimport detectPortAlt from 'detect-port-alt'\r\nimport prompts, { PromptObject } from 'prompts'\r\n\r\nconst nextDev: cliCommand = (argv) => {\r\n  const validArgs: arg.Spec = {\r\n    // Types\r\n    '--help': Boolean,\r\n    '--port': Number,\r\n    '--hostname': String,\r\n\r\n    // Aliases\r\n    '-h': '--help',\r\n    '-p': '--port',\r\n    '-H': '--hostname',\r\n  }\r\n  let args: arg.Result<arg.Spec>\r\n  try {\r\n    args = arg(validArgs, { argv })\r\n  } catch (error) {\r\n    if (error.code === 'ARG_UNKNOWN_OPTION') {\r\n      return printAndExit(error.message, 1)\r\n    }\r\n    throw error\r\n  }\r\n  if (args['--help']) {\r\n    console.log(`\r\n      Description\r\n        Starts the application in development mode (hot-code reloading, error\r\n        reporting, etc)\r\n\r\n      Usage\r\n        $ next dev <dir> -p <port number>\r\n\r\n      <dir> represents the directory of the Next.js application.\r\n      If no directory is provided, the current directory will be used.\r\n\r\n      Options\r\n        --port, -p      A port number on which to start the application\r\n        --hostname, -H  Hostname on which to start the application (default: 0.0.0.0)\r\n        --help, -h      Displays this message\r\n    `)\r\n    process.exit(0)\r\n  }\r\n\r\n  const dir = resolve(args._[0] || '.')\r\n\r\n  // Check if pages dir exists and warn if not\r\n  if (!existsSync(dir)) {\r\n    printAndExit(`> No such directory exists as the project root: ${dir}`)\r\n  }\r\n\r\n  async function preflight() {\r\n    const { getPackageVersion } = await import('../lib/get-package-version')\r\n    const [sassVersion, nodeSassVersion] = await Promise.all([\r\n      getPackageVersion({ cwd: dir, name: 'sass' }),\r\n      getPackageVersion({ cwd: dir, name: 'node-sass' }),\r\n    ])\r\n    if (sassVersion && nodeSassVersion) {\r\n      Log.warn(\r\n        'Your project has both `sass` and `node-sass` installed as dependencies, but should only use one or the other. ' +\r\n          'Please remove the `node-sass` dependency from your project. ' +\r\n          ' Read more: https://nextjs.org/docs/messages/duplicate-sass'\r\n      )\r\n    }\r\n  }\r\n\r\n  const defaultPort =\r\n    args['--port'] || (process.env.PORT && parseInt(process.env.PORT)) || 3000\r\n  const host = args['--hostname'] || '0.0.0.0'\r\n  const appUrl = `http://${\r\n    host === '0.0.0.0' ? 'localhost' : host\r\n  }:${defaultPort}`\r\n\r\n  main(defaultPort)\r\n\r\n  function main(port: number) {\r\n    startServer({ dir, dev: true, isNextDevCommand: true }, port, host)\r\n      .then(async (app) => {\r\n        startedDevelopmentServer(appUrl, `${host}:${port}`)\r\n        // Start preflight after server is listening and ignore errors:\r\n        preflight().catch(() => {})\r\n        // Finalize server bootup:\r\n        await app.prepare()\r\n      })\r\n      .catch(async (err) => {\r\n        if (err.code === 'EADDRINUSE') {\r\n          let errorMessage = `Port ${port} is already in use.`\r\n          const pkgAppPath = require('next/dist/compiled/find-up').sync(\r\n            'package.json',\r\n            {\r\n              cwd: dir,\r\n            }\r\n          )\r\n          const appPackage = require(pkgAppPath)\r\n          if (appPackage.scripts) {\r\n            const nextScript = Object.entries(appPackage.scripts).find(\r\n              (scriptLine) => scriptLine[1] === 'next'\r\n            )\r\n            if (nextScript) {\r\n              errorMessage += `\\nUse \\`npm run ${nextScript[0]} -- -p <some other port>\\`.`\r\n            }\r\n          }\r\n          // console.error(errorMessage)\r\n\r\n          // Terminate early if ternimal not interactive\r\n          const isTerminalInteractive = process.stdout.isTTY\r\n          if (!isTerminalInteractive) return\r\n\r\n          const altPort: number = detectPortAlt(port)\r\n\r\n          const isRoot = () => true\r\n\r\n          const message =\r\n            process.platform !== 'win32' && port < 1024 && !isRoot()\r\n              ? `Admin permissions are required to run a server on a port below 1024.`\r\n              : `Something is already running on port ${port}.`\r\n          const question: PromptObject = {\r\n            type: 'confirm',\r\n            name: 'shouldChangePort',\r\n            message: `${message}\\n\\nWould you like to run the app on another port instead?`,\r\n            initial: true,\r\n          }\r\n          const answer = await prompts(question)\r\n          if (answer.shouldChangePort) main(altPort)\r\n        } else {\r\n          console.error(err)\r\n        }\r\n        process.nextTick(() => process.exit(1))\r\n      })\r\n  }\r\n}\r\n\r\nexport { nextDev }\r\n"]}