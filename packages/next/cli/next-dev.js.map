{"version":3,"sources":["../../cli/next-dev.ts"],"names":["nextDev","validArgs","args","argv","error","code","console","process","exit","getPackageVersion","cwd","dir","name","Log","scripts","require","scriptsArray","Object","entries","nextScript","message","isAdminRequired","defaultPort","port","choosePort","dev","isNextDevCommand"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport arg from 'next/dist/compiled/arg/index.js'\nimport { existsSync } from 'fs'\nimport startServer from '../server/lib/start-server'\nimport { printAndExit } from '../server/lib/utils'\nimport * as Log from '../build/output/log'\nimport { startedDevelopmentServer } from '../build/output'\nimport { cliCommand } from '../bin/next'\nimport detectPort from 'detect-port'\nimport prompts, { PromptObject } from 'prompts'\nimport clearConsole from '../server/lib/clearConsole'\n\nconst nextDev: cliCommand = async (argv) => {\n  const validArgs: arg.Spec = {\n    // Types\n    '--help': Boolean,\n    '--port': Number,\n    '--hostname': String,\n\n    // Aliases\n    '-h': '--help',\n    '-p': '--port',\n    '-H': '--hostname',\n  }\n  let args: arg.Result<arg.Spec>\n  try {\n    args = arg(validArgs, { argv })\n  } catch (error) {\n    if (error.code === 'ARG_UNKNOWN_OPTION') {\n      return printAndExit(error.message, 1)\n    }\n    throw error\n  }\n  if (args['--help']) {\n    console.log(`\n      Description\n        Starts the application in development mode (hot-code reloading, error\n        reporting, etc)\n\n      Usage\n        $ next dev <dir> -p <port number>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        --port, -p      A port number on which to start the application\n        --hostname, -H  Hostname on which to start the application (default: 0.0.0.0)\n        --help, -h      Displays this message\n    `)\n    process.exit(0)\n  }\n\n  const dir = resolve(args._[0] || '.')\n\n  // Check if pages dir exists and warn if not\n  if (!existsSync(dir)) {\n    printAndExit(`> No such directory exists as the project root: ${dir}`)\n  }\n\n  async function preflight() {\n    const { getPackageVersion } = await import('../lib/get-package-version')\n    const [sassVersion, nodeSassVersion] = await Promise.all([\n      getPackageVersion({ cwd: dir, name: 'sass' }),\n      getPackageVersion({ cwd: dir, name: 'node-sass' }),\n    ])\n    if (sassVersion && nodeSassVersion) {\n      Log.warn(\n        'Your project has both `sass` and `node-sass` installed as dependencies, but should only use one or the other. ' +\n          'Please remove the `node-sass` dependency from your project. ' +\n          ' Read more: https://nextjs.org/docs/messages/duplicate-sass'\n      )\n    }\n  }\n\n  async function choosePort(defaultPort: number): Promise<number> {\n    const availablePort: number = await detectPort(defaultPort)\n\n    if (defaultPort === availablePort) return defaultPort\n\n    // Default port is not free,\n    // prompt user to allow another port\n\n    const isTerminalInteractive = process.stdout.isTTY\n\n    // Simply log instructions if terminal is not interactive\n    if (!isTerminalInteractive) {\n      let message = `Something is already running on port ${defaultPort}.`\n      const packageJsonPath = require('next/dist/compiled/find-up').sync(\n        'package.json',\n        { cwd: dir }\n      )\n      const { scripts } = require(packageJsonPath)\n      if (scripts) {\n        const scriptsArray = Object.entries(scripts)\n        const nextScript = scriptsArray.find(([_, cmd]) => cmd === 'next')\n        if (nextScript) {\n          message += `\\`npm run ${nextScript[0]} -- -p <some other port>\\``\n        }\n      }\n      console.error(message)\n    }\n\n    // Terimal is interactive\n    // prompt to run on another port\n\n    const isRoot = process.getuid && process.getuid() === 0\n    const isAdminRequired =\n      process.platform !== 'win32' && defaultPort < 1024 && !isRoot\n\n    const message = isAdminRequired\n      ? `Admin permissions are required to run a server on a port below 1024.`\n      : `Something is already running on port ${defaultPort}.`\n\n    const question: PromptObject = {\n      type: 'confirm',\n      name: 'shouldChangePort',\n      message: `${message}\\n\\nWould you like to run the app on another port instead?`,\n      initial: true,\n    }\n\n    clearConsole()\n    const answer = await prompts(question)\n\n    if (answer.shouldChangePort) {\n      clearConsole()\n      return availablePort\n    }\n    process.exit()\n  }\n\n  const defaultPort =\n    args['--port'] || (process.env.PORT && parseInt(process.env.PORT)) || 3000\n  const port = await choosePort(defaultPort)\n  const host = args['--hostname'] || '0.0.0.0'\n  const appUrl = `http://${host === '0.0.0.0' ? 'localhost' : host}:${port}`\n\n  startServer({ dir, dev: true, isNextDevCommand: true }, port, host)\n    .then(async (app) => {\n      startedDevelopmentServer(appUrl, `${host}:${port}`)\n      // Start preflight after server is listening and ignore errors:\n      preflight().catch(() => {})\n      // Finalize server bootup:\n      await app.prepare()\n    })\n    .catch(() => process.nextTick(() => process.exit(1)))\n}\n\nexport { nextDev }\n"]}