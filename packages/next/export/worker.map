{"version":3,"sources":["../../export/worker.ts"],"names":["envConfig","require","global","__NEXT_DATA__","nextExport","exportPage","parentSpanId","path","pathMap","distDir","outDir","pagesDataDir","renderOpts","buildExport","serverRuntimeConfig","subFolders","serverless","optimizeFonts","optimizeImages","optimizeCss","disableOptimizedLoading","exportPageSpan","traceAsyncFn","results","ampValidations","query","originalQuery","page","filePath","isDynamic","ampPath","renderAmpPath","params","updatedPath","__nextSsgPath","locale","__nextLocale","localePathResult","locales","detectedLocale","pathname","defaultLocale","hasOrigQueryValues","Object","keys","length","queryWithAutoExportWarn","Error","nonLocalizedPath","undefined","headerMocks","headers","getHeader","setHeader","hasHeader","removeHeader","getHeaderNames","req","url","res","statusCode","trailingSlash","endsWith","setConfig","publicRuntimeConfig","runtimeConfig","htmlFilename","sep","pageExt","pathExt","baseDir","htmlFilepath","promises","mkdir","recursive","html","curRenderOpts","renderMethod","renderToHTML","inAmpMode","hybridAmp","renderedDuringBuild","getStaticProps","curUrl","parse","format","Component","mod","getServerSideProps","pageConfig","ampState","ampFirst","amp","hasQuery","Boolean","hybrid","SERVER_PROPS_EXPORT_ERROR","renderReqToHTML","result","fontManifest","isNotFound","components","process","env","__NEXT_OPTIMIZE_FONTS","JSON","stringify","__NEXT_OPTIMIZE_IMAGES","__NEXT_OPTIMIZE_CSS","ssgNotFound","validateAmp","rawAmpHtml","ampPageName","validatorPath","validator","AmpHtmlValidator","getInstance","validateString","errors","filter","e","severity","warnings","push","ampSkipValidation","ampValidatorPath","ampHtmlFilename","ampBaseDir","ampHtmlFilepath","access","_","ampHtml","includes","writeFile","pageData","dataFile","replace","fromBuildExportRevalidate","revalidate","error","console","stack"],"mappings":"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","sourcesContent":["import url from 'url'\r\nimport { extname, join, dirname, sep } from 'path'\r\nimport { renderToHTML } from '../next-server/server/render'\r\nimport { promises } from 'fs'\r\nimport AmpHtmlValidator from 'next/dist/compiled/amphtml-validator'\r\nimport { loadComponents } from '../next-server/server/load-components'\r\nimport { isDynamicRoute } from '../next-server/lib/router/utils/is-dynamic'\r\nimport { getRouteMatcher } from '../next-server/lib/router/utils/route-matcher'\r\nimport { getRouteRegex } from '../next-server/lib/router/utils/route-regex'\r\nimport { normalizePagePath } from '../next-server/server/normalize-page-path'\r\nimport { SERVER_PROPS_EXPORT_ERROR } from '../lib/constants'\r\nimport 'next/dist/next-server/server/node-polyfill-fetch'\r\nimport { IncomingMessage, ServerResponse } from 'http'\r\nimport { ComponentType } from 'react'\r\nimport { GetStaticProps } from '../types'\r\nimport { requireFontManifest } from '../next-server/server/require'\r\nimport { FontManifest } from '../next-server/server/font-utils'\r\nimport { normalizeLocalePath } from '../next-server/lib/i18n/normalize-locale-path'\r\nimport { trace } from '../telemetry/trace'\r\nimport { isInAmpMode } from '../next-server/lib/amp'\r\n\r\nconst envConfig = require('../next-server/lib/runtime-config')\r\n\r\n;(global as any).__NEXT_DATA__ = {\r\n  nextExport: true,\r\n}\r\n\r\ninterface AmpValidation {\r\n  page: string\r\n  result: {\r\n    errors: AmpHtmlValidator.ValidationError[]\r\n    warnings: AmpHtmlValidator.ValidationError[]\r\n  }\r\n}\r\n\r\ninterface PathMap {\r\n  page: string\r\n  query?: { [key: string]: string | string[] }\r\n}\r\n\r\ninterface ExportPageInput {\r\n  path: string\r\n  pathMap: PathMap\r\n  distDir: string\r\n  outDir: string\r\n  pagesDataDir: string\r\n  renderOpts: RenderOpts\r\n  buildExport?: boolean\r\n  serverRuntimeConfig: string\r\n  subFolders?: boolean\r\n  serverless: boolean\r\n  optimizeFonts: boolean\r\n  optimizeImages?: boolean\r\n  optimizeCss: any\r\n  disableOptimizedLoading: any\r\n  parentSpanId: any\r\n}\r\n\r\ninterface ExportPageResults {\r\n  ampValidations: AmpValidation[]\r\n  fromBuildExportRevalidate?: number\r\n  error?: boolean\r\n  ssgNotFound?: boolean\r\n}\r\n\r\ninterface RenderOpts {\r\n  runtimeConfig?: { [key: string]: any }\r\n  params?: { [key: string]: string | string[] }\r\n  ampPath?: string\r\n  ampValidatorPath?: string\r\n  ampSkipValidation?: boolean\r\n  optimizeFonts?: boolean\r\n  optimizeImages?: boolean\r\n  disableOptimizedLoading?: boolean\r\n  optimizeCss?: any\r\n  fontManifest?: FontManifest\r\n  locales?: string[]\r\n  locale?: string\r\n  defaultLocale?: string\r\n  trailingSlash?: boolean\r\n}\r\n\r\ntype ComponentModule = ComponentType<{}> & {\r\n  renderReqToHTML: typeof renderToHTML\r\n  getStaticProps?: GetStaticProps\r\n}\r\n\r\nexport default async function exportPage({\r\n  parentSpanId,\r\n  path,\r\n  pathMap,\r\n  distDir,\r\n  outDir,\r\n  pagesDataDir,\r\n  renderOpts,\r\n  buildExport,\r\n  serverRuntimeConfig,\r\n  subFolders,\r\n  serverless,\r\n  optimizeFonts,\r\n  optimizeImages,\r\n  optimizeCss,\r\n  disableOptimizedLoading,\r\n}: ExportPageInput): Promise<ExportPageResults> {\r\n  const exportPageSpan = trace('export-page-worker', parentSpanId)\r\n\r\n  return exportPageSpan.traceAsyncFn(async () => {\r\n    let results: ExportPageResults = {\r\n      ampValidations: [],\r\n    }\r\n\r\n    try {\r\n      const { query: originalQuery = {} } = pathMap\r\n      const { page } = pathMap\r\n      const filePath = normalizePagePath(path)\r\n      const isDynamic = isDynamicRoute(page)\r\n      const ampPath = `${filePath}.amp`\r\n      let renderAmpPath = ampPath\r\n      let query = { ...originalQuery }\r\n      let params: { [key: string]: string | string[] } | undefined\r\n\r\n      let updatedPath = (query.__nextSsgPath as string) || path\r\n      let locale = query.__nextLocale || renderOpts.locale\r\n      delete query.__nextLocale\r\n      delete query.__nextSsgPath\r\n\r\n      if (renderOpts.locale) {\r\n        const localePathResult = normalizeLocalePath(path, renderOpts.locales)\r\n\r\n        if (localePathResult.detectedLocale) {\r\n          updatedPath = localePathResult.pathname\r\n          locale = localePathResult.detectedLocale\r\n\r\n          if (locale === renderOpts.defaultLocale) {\r\n            renderAmpPath = `${normalizePagePath(updatedPath)}.amp`\r\n          }\r\n        }\r\n      }\r\n\r\n      // We need to show a warning if they try to provide query values\r\n      // for an auto-exported page since they won't be available\r\n      const hasOrigQueryValues = Object.keys(originalQuery).length > 0\r\n      const queryWithAutoExportWarn = () => {\r\n        if (hasOrigQueryValues) {\r\n          throw new Error(\r\n            `\\nError: you provided query values for ${path} which is an auto-exported page. These can not be applied since the page can no longer be re-rendered on the server. To disable auto-export for this page add \\`getInitialProps\\`\\n`\r\n          )\r\n        }\r\n      }\r\n\r\n      // Check if the page is a specified dynamic route\r\n      const nonLocalizedPath = normalizeLocalePath(path, renderOpts.locales)\r\n        .pathname\r\n\r\n      if (isDynamic && page !== nonLocalizedPath) {\r\n        params = getRouteMatcher(getRouteRegex(page))(updatedPath) || undefined\r\n        if (params) {\r\n          // we have to pass these separately for serverless\r\n          if (!serverless) {\r\n            query = {\r\n              ...query,\r\n              ...params,\r\n            }\r\n          }\r\n        } else {\r\n          throw new Error(\r\n            `The provided export path '${updatedPath}' doesn't match the '${page}' page.\\nRead more: https://nextjs.org/docs/messages/export-path-mismatch`\r\n          )\r\n        }\r\n      }\r\n\r\n      const headerMocks = {\r\n        headers: {},\r\n        getHeader: () => ({}),\r\n        setHeader: () => {},\r\n        hasHeader: () => false,\r\n        removeHeader: () => {},\r\n        getHeaderNames: () => [],\r\n      }\r\n\r\n      const req = ({\r\n        url: updatedPath,\r\n        ...headerMocks,\r\n      } as unknown) as IncomingMessage\r\n      const res = ({\r\n        ...headerMocks,\r\n      } as unknown) as ServerResponse\r\n\r\n      if (path === '/500' && page === '/_error') {\r\n        res.statusCode = 500\r\n      }\r\n\r\n      if (renderOpts.trailingSlash && !req.url?.endsWith('/')) {\r\n        req.url += '/'\r\n      }\r\n\r\n      envConfig.setConfig({\r\n        serverRuntimeConfig,\r\n        publicRuntimeConfig: renderOpts.runtimeConfig,\r\n      })\r\n\r\n      let htmlFilename = `${filePath}${sep}index.html`\r\n      if (!subFolders) htmlFilename = `${filePath}.html`\r\n\r\n      const pageExt = extname(page)\r\n      const pathExt = extname(path)\r\n      // Make sure page isn't a folder with a dot in the name e.g. `v1.2`\r\n      if (pageExt !== pathExt && pathExt !== '') {\r\n        // If the path has an extension, use that as the filename instead\r\n        htmlFilename = path\r\n      } else if (path === '/') {\r\n        // If the path is the root, just use index.html\r\n        htmlFilename = 'index.html'\r\n      }\r\n\r\n      const baseDir = join(outDir, dirname(htmlFilename))\r\n      let htmlFilepath = join(outDir, htmlFilename)\r\n\r\n      await promises.mkdir(baseDir, { recursive: true })\r\n      let html\r\n      let curRenderOpts: RenderOpts = {}\r\n      let renderMethod = renderToHTML\r\n      let inAmpMode = false,\r\n        hybridAmp = false\r\n\r\n      const renderedDuringBuild = (getStaticProps: any) => {\r\n        return !buildExport && getStaticProps && !isDynamicRoute(path)\r\n      }\r\n\r\n      if (serverless) {\r\n        const curUrl = url.parse(req.url!, true)\r\n        req.url = url.format({\r\n          ...curUrl,\r\n          query: {\r\n            ...curUrl.query,\r\n            ...query,\r\n          },\r\n        })\r\n        const {\r\n          Component: mod,\r\n          getServerSideProps,\r\n          pageConfig,\r\n        } = await loadComponents(distDir, page, serverless)\r\n        const ampState = {\r\n          ampFirst: pageConfig?.amp === true,\r\n          hasQuery: Boolean(query.amp),\r\n          hybrid: pageConfig?.amp === 'hybrid',\r\n        }\r\n        inAmpMode = isInAmpMode(ampState)\r\n        hybridAmp = ampState.hybrid\r\n\r\n        if (getServerSideProps) {\r\n          throw new Error(\r\n            `Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`\r\n          )\r\n        }\r\n\r\n        // if it was auto-exported the HTML is loaded here\r\n        if (typeof mod === 'string') {\r\n          html = mod\r\n          queryWithAutoExportWarn()\r\n        } else {\r\n          // for non-dynamic SSG pages we should have already\r\n          // prerendered the file\r\n          if (renderedDuringBuild((mod as ComponentModule).getStaticProps))\r\n            return results\r\n\r\n          if (\r\n            (mod as ComponentModule).getStaticProps &&\r\n            !htmlFilepath.endsWith('.html')\r\n          ) {\r\n            // make sure it ends with .html if the name contains a dot\r\n            htmlFilename += '.html'\r\n            htmlFilepath += '.html'\r\n          }\r\n\r\n          renderMethod = (mod as ComponentModule).renderReqToHTML\r\n          const result = await renderMethod(\r\n            req,\r\n            res,\r\n            'export',\r\n            {\r\n              ampPath: renderAmpPath,\r\n              /// @ts-ignore\r\n              optimizeFonts,\r\n              /// @ts-ignore\r\n              optimizeImages,\r\n              /// @ts-ignore\r\n              optimizeCss,\r\n              disableOptimizedLoading,\r\n              distDir,\r\n              fontManifest: optimizeFonts\r\n                ? requireFontManifest(distDir, serverless)\r\n                : null,\r\n              locale: locale!,\r\n              locales: renderOpts.locales!,\r\n            },\r\n            // @ts-ignore\r\n            params\r\n          )\r\n          curRenderOpts = (result as any).renderOpts || {}\r\n          html = (result as any).html\r\n        }\r\n\r\n        if (!html && !(curRenderOpts as any).isNotFound) {\r\n          throw new Error(`Failed to render serverless page`)\r\n        }\r\n      } else {\r\n        const components = await loadComponents(distDir, page, serverless)\r\n        const ampState = {\r\n          ampFirst: components.pageConfig?.amp === true,\r\n          hasQuery: Boolean(query.amp),\r\n          hybrid: components.pageConfig?.amp === 'hybrid',\r\n        }\r\n        inAmpMode = isInAmpMode(ampState)\r\n        hybridAmp = ampState.hybrid\r\n\r\n        if (components.getServerSideProps) {\r\n          throw new Error(\r\n            `Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`\r\n          )\r\n        }\r\n\r\n        // for non-dynamic SSG pages we should have already\r\n        // prerendered the file\r\n        if (renderedDuringBuild(components.getStaticProps)) {\r\n          return results\r\n        }\r\n\r\n        // TODO: de-dupe the logic here between serverless and server mode\r\n        if (components.getStaticProps && !htmlFilepath.endsWith('.html')) {\r\n          // make sure it ends with .html if the name contains a dot\r\n          htmlFilepath += '.html'\r\n          htmlFilename += '.html'\r\n        }\r\n\r\n        if (typeof components.Component === 'string') {\r\n          html = components.Component\r\n          queryWithAutoExportWarn()\r\n        } else {\r\n          /**\r\n           * This sets environment variable to be used at the time of static export by head.tsx.\r\n           * Using this from process.env allows targeting both serverless and SSR by calling\r\n           * `process.env.__NEXT_OPTIMIZE_FONTS`.\r\n           * TODO(prateekbh@): Remove this when experimental.optimizeFonts are being cleaned up.\r\n           */\r\n          if (optimizeFonts) {\r\n            process.env.__NEXT_OPTIMIZE_FONTS = JSON.stringify(true)\r\n          }\r\n          if (optimizeImages) {\r\n            process.env.__NEXT_OPTIMIZE_IMAGES = JSON.stringify(true)\r\n          }\r\n          if (optimizeCss) {\r\n            process.env.__NEXT_OPTIMIZE_CSS = JSON.stringify(true)\r\n          }\r\n          curRenderOpts = {\r\n            ...components,\r\n            ...renderOpts,\r\n            ampPath: renderAmpPath,\r\n            params,\r\n            optimizeFonts,\r\n            optimizeImages,\r\n            optimizeCss,\r\n            disableOptimizedLoading,\r\n            fontManifest: optimizeFonts\r\n              ? requireFontManifest(distDir, serverless)\r\n              : null,\r\n            locale: locale as string,\r\n          }\r\n          // @ts-ignore\r\n          html = await renderMethod(req, res, page, query, curRenderOpts)\r\n        }\r\n      }\r\n      results.ssgNotFound = (curRenderOpts as any).isNotFound\r\n\r\n      const validateAmp = async (\r\n        rawAmpHtml: string,\r\n        ampPageName: string,\r\n        validatorPath?: string\r\n      ) => {\r\n        const validator = await AmpHtmlValidator.getInstance(validatorPath)\r\n        const result = validator.validateString(rawAmpHtml)\r\n        const errors = result.errors.filter((e) => e.severity === 'ERROR')\r\n        const warnings = result.errors.filter((e) => e.severity !== 'ERROR')\r\n\r\n        if (warnings.length || errors.length) {\r\n          results.ampValidations.push({\r\n            page: ampPageName,\r\n            result: {\r\n              errors,\r\n              warnings,\r\n            },\r\n          })\r\n        }\r\n      }\r\n\r\n      if (inAmpMode && !curRenderOpts.ampSkipValidation) {\r\n        if (!results.ssgNotFound) {\r\n          await validateAmp(html, path, curRenderOpts.ampValidatorPath)\r\n        }\r\n      } else if (hybridAmp) {\r\n        // we need to render the AMP version\r\n        let ampHtmlFilename = `${ampPath}${sep}index.html`\r\n        if (!subFolders) {\r\n          ampHtmlFilename = `${ampPath}.html`\r\n        }\r\n        const ampBaseDir = join(outDir, dirname(ampHtmlFilename))\r\n        const ampHtmlFilepath = join(outDir, ampHtmlFilename)\r\n\r\n        try {\r\n          await promises.access(ampHtmlFilepath)\r\n        } catch (_) {\r\n          // make sure it doesn't exist from manual mapping\r\n          let ampHtml\r\n          if (serverless) {\r\n            req.url += (req.url!.includes('?') ? '&' : '?') + 'amp=1'\r\n            // @ts-ignore\r\n            ampHtml = (\r\n              await (renderMethod as any)(\r\n                req,\r\n                res,\r\n                'export',\r\n                curRenderOpts,\r\n                params\r\n              )\r\n            ).html\r\n          } else {\r\n            ampHtml = await renderMethod(\r\n              req,\r\n              res,\r\n              page,\r\n              // @ts-ignore\r\n              { ...query, amp: '1' },\r\n              curRenderOpts as any\r\n            )\r\n          }\r\n\r\n          if (!curRenderOpts.ampSkipValidation) {\r\n            await validateAmp(ampHtml, page + '?amp=1')\r\n          }\r\n          await promises.mkdir(ampBaseDir, { recursive: true })\r\n          await promises.writeFile(ampHtmlFilepath, ampHtml, 'utf8')\r\n        }\r\n      }\r\n\r\n      if ((curRenderOpts as any).pageData) {\r\n        const dataFile = join(\r\n          pagesDataDir,\r\n          htmlFilename.replace(/\\.html$/, '.json')\r\n        )\r\n\r\n        await promises.mkdir(dirname(dataFile), { recursive: true })\r\n        await promises.writeFile(\r\n          dataFile,\r\n          JSON.stringify((curRenderOpts as any).pageData),\r\n          'utf8'\r\n        )\r\n\r\n        if (hybridAmp) {\r\n          await promises.writeFile(\r\n            dataFile.replace(/\\.json$/, '.amp.json'),\r\n            JSON.stringify((curRenderOpts as any).pageData),\r\n            'utf8'\r\n          )\r\n        }\r\n      }\r\n      results.fromBuildExportRevalidate = (curRenderOpts as any).revalidate\r\n\r\n      if (results.ssgNotFound) {\r\n        // don't attempt writing to disk if getStaticProps returned not found\r\n        return results\r\n      }\r\n      await promises.writeFile(htmlFilepath, html, 'utf8')\r\n      return results\r\n    } catch (error) {\r\n      console.error(\r\n        `\\nError occurred prerendering page \"${path}\". Read more: https://nextjs.org/docs/messages/prerender-error\\n` +\r\n          error.stack\r\n      )\r\n      return { ...results, error: true }\r\n    }\r\n  })\r\n}\r\n"]}