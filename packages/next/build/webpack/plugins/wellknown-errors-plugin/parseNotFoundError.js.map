{"version":3,"sources":["../../../../../build/webpack/plugins/wellknown-errors-plugin/parseNotFoundError.ts"],"names":["chalk","Chalk","enabled","input","loc","d","originalSource","result","line","column","source","rootDirectory","compilation","frame","errorMessage","message","SimpleWebpackError","console"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;;;;;;;AAEA,MAAMA,KAAK,GAAG,IAAIC,MAAAA,CAAAA,OAAAA,CAAJ,WAAA,CAAsB;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAtB,CAAd;;AAEO,eAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,EAAA,QAAA,EAIL;AACA,MAAIC,KAAK,CAALA,IAAAA,KAAJ,qBAAA,EAA0C;AACxC,WAAA,KAAA;AACD;;AAED,QAAMC,GAAG,GAAGD,KAAK,CAALA,GAAAA,GACRA,KAAK,CADGA,GAAAA,GAERA,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAAwBE,CAAD,IAAYA,CAAC,CAApCF,GAAAA,EAAAA,MAAAA,CAAAA,OAAAA,EAFJ,CAEIA,CAFJ;AAGA,QAAMG,cAAc,GAAGH,KAAK,CAALA,MAAAA,CAAvB,cAAuBA,EAAvB;;AAEA,MAAI;AAAA,QAAA,qBAAA,EAAA,sBAAA,EAAA,sBAAA,EAAA,sBAAA;;AACF,UAAMI,MAAM,GAAG,MAAM,CAAA,GAAA,WAAA,CAAA,wBAAA,EAAyB;AAC5CC,MAAAA,IAAI,EAAEJ,GAAG,CAAHA,KAAAA,CADsC,IAAA;AAE5CK,MAAAA,MAAM,EAAEL,GAAG,CAAHA,KAAAA,CAFoC,MAAA;AAG5CM,MAAAA,MAAM,EAHsC,cAAA;AAI5CC,MAAAA,aAAa,EAAEC,WAAW,CAAXA,OAAAA,CAJ6B,OAAA;AAK5CC,MAAAA,KAAK,EAAE;AALqC,KAAzB,CAArB,CADE,CASF;;AACA,QAAI,CAAJ,MAAA,EAAa;AACX,aAAA,KAAA;AACD;;AAED,UAAMC,YAAY,GAAGX,KAAK,CAALA,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,WAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAAAA,sBAAAA,EAEe,kBAAiBH,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAFrD,GAAqBG,CAArB;AAIA,UAAMY,OAAO,GACXf,KAAK,CAALA,GAAAA,CAAAA,IAAAA,CAAAA,kBAAAA,IACC,KAAIc,YADLd,EAAAA,GAAAA,IAAAA,GAGAO,MAAM,CAJR,iBAAA;AAMA,WAAO,IAAIS,mBAAAA,CAAJ,kBAAA,CACJ,GAAEhB,KAAK,CAALA,IAAAA,CAAAA,QAAAA,CAAqB,IAAGA,KAAK,CAALA,MAAAA,CAAAA,CAAAA,qBAAAA,GAAAA,CAAAA,sBAAAA,GACzBO,MAAM,CAANA,kBAAAA,CADyBP,UAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GACzBO,sBAAAA,CADyBP,QACzBO,EADyBP,KAAAA,IAAAA,GAAAA,qBAAAA,GAAAA,EAAAA,CAEzB,IAAGA,KAAK,CAALA,MAAAA,CAAAA,CAAAA,sBAAAA,GAAAA,CAAAA,sBAAAA,GAAaO,MAAM,CAANA,kBAAAA,CAAbP,MAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAaO,sBAAAA,CAAbP,QAAaO,EAAbP,KAAAA,IAAAA,GAAAA,sBAAAA,GAAAA,EAAAA,CAHA,EAAA,EAAP,OAAO,CAAP;AAxBF,GAAA,CA8BE,OAAA,GAAA,EAAY;AACZiB,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,6BAAAA,EADY,GACZA,EADY,CAEZ;;AACA,WAAA,KAAA;AACD;AACF","sourcesContent":["import Chalk from 'chalk'\r\nimport { SimpleWebpackError } from './simpleWebpackError'\r\nimport { createOriginalStackFrame } from '@next/react-dev-overlay/lib/middleware'\r\n\r\nconst chalk = new Chalk.constructor({ enabled: true })\r\n\r\nexport async function getNotFoundError(\r\n  compilation: any,\r\n  input: any,\r\n  fileName: string\r\n) {\r\n  if (input.name !== 'ModuleNotFoundError') {\r\n    return false\r\n  }\r\n\r\n  const loc = input.loc\r\n    ? input.loc\r\n    : input.dependencies.map((d: any) => d.loc).filter(Boolean)[0]\r\n  const originalSource = input.module.originalSource()\r\n\r\n  try {\r\n    const result = await createOriginalStackFrame({\r\n      line: loc.start.line,\r\n      column: loc.start.column,\r\n      source: originalSource,\r\n      rootDirectory: compilation.options.context,\r\n      frame: {},\r\n    })\r\n\r\n    // If we could not result the original location we still need to show the existing error\r\n    if (!result) {\r\n      return input\r\n    }\r\n\r\n    const errorMessage = input.error.message\r\n      .replace(/ in '.*?'/, '')\r\n      .replace(/Can't resolve '(.*)'/, `Can't resolve '${chalk.green('$1')}'`)\r\n\r\n    const message =\r\n      chalk.red.bold('Module not found') +\r\n      `: ${errorMessage}` +\r\n      '\\n' +\r\n      result.originalCodeFrame\r\n\r\n    return new SimpleWebpackError(\r\n      `${chalk.cyan(fileName)}:${chalk.yellow(\r\n        result.originalStackFrame.lineNumber?.toString() ?? ''\r\n      )}:${chalk.yellow(result.originalStackFrame.column?.toString() ?? '')}`,\r\n      message\r\n    )\r\n  } catch (err) {\r\n    console.log('Failed to parse source map:', err)\r\n    // Don't fail on failure to resolve sourcemaps\r\n    return input\r\n  }\r\n}\r\n"]}